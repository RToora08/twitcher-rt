{"version":3,"sources":["images/brand-logo.svg","store/reducers/currentUser.js","store/reducers/index.js","store/actionTypes.js","store/reducers/errors.js","containers/Navbar.js","components/Homepage.js","containers/Main.js","containers/App.js","store/index.js","serviceWorker.js","index.js"],"names":["module","exports","DEFAULT_STATE","isAuthenticated","user","rootReducer","combineReducers","currentUser","state","action","console","log","type","Object","keys","length","errors","message","error","active","backgroundColor","boxShadow","Navbar","className","to","src","brandLogo","alt","activeStyle","Component","connect","Homepage","withRouter","props","exact","path","render","store","createStore","compose","applyMiddleware","thunk","window","devToolsExtension","f","App","Boolean","location","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"sHAAAA,EAAOC,QAAU,IAA0B,wC,4JCErCC,EAAgB,CACrBC,iBAAiB,EACjBC,KAAM,I,QCMQC,EALKC,YAAgB,CACnCC,YDCc,WAAoC,IAAnCC,EAAkC,uDAA1BN,EAAeO,EAAW,uCAEjD,OADAC,QAAQC,IAAIF,GACJA,EAAOG,MACd,IER8B,mBFS7B,MAAO,CAINT,kBAAmBU,OAAOC,KAAKL,EAAOL,MAAMW,OAK5CX,KAAMK,EAAOL,MAEf,QACC,OAAOI,IChBTQ,OELc,WAAwC,IAAvCR,EAAsC,uDAA9B,CAAES,QAAS,MAAQR,EAAW,uCACrD,OAAQA,EAAOG,MACd,IDJuB,YCKtB,OAAO,eAAKJ,EAAZ,CAAmBS,QAASR,EAAOS,QACpC,IDL0B,eCMzB,OAAO,eAAKV,EAAZ,CAAmBS,QAAS,OAC7B,QACC,OAAOT,M,oECJJW,EAAS,CACdC,gBAAiB,UACjBC,UAAW,wBAGNC,E,uKAEJ,OACC,yBAAKC,UAAU,kEACd,yBAAKA,UAAU,gBACd,kBAAC,IAAD,CAAMC,GAAG,IAAID,UAAU,gBACtB,yBAAKE,IAAKC,IAAWC,IAAI,eAG3B,6BACC,wBAAIJ,UAAU,yBACb,4BACC,kBAAC,IAAD,CAASC,GAAG,UAAUI,YAAaT,GAAnC,YAID,4BACC,kBAAC,IAAD,CAASK,GAAG,UAAUI,YAAaT,GAAnC,kB,GAjBcU,aAqCNC,mBANf,SAAyBtB,GACxB,MAAO,CACND,YAAaC,EAAMD,eAImB,KAAzBuB,CAA+BR,G,OC9B/BS,EAdE,kBAChB,yBAAKR,UAAU,aACd,yBAAKA,UAAU,cACd,0CACA,0BAAMA,UAAU,QAAhB,KACA,0BAAMA,UAAU,MAAhB,MAED,0BAAMA,UAAU,QAAhB,YACA,kBAAC,IAAD,CAAMC,GAAG,UAAUD,UAAU,6BAA7B,kBCUaS,kBAAWF,aAN1B,SAAyBtB,GACxB,MAAO,CACND,YAAaC,EAAMD,eAI8B,KAAzBuB,EAhBb,SAACG,GACb,OACC,yBAAKV,UAAU,aACd,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOW,OAAK,EAACC,KAAK,IAAIC,OAAQ,SAACH,GAAD,OAAW,kBAAC,EAAaA,YCDrDI,ECGSC,YACbjC,EACAkC,YAAQC,YAAgBC,KAAQC,OAAOC,kBAAoBD,OAAOC,oBAAsB,SAACC,GAAD,OAAOA,KDOlFC,EAVH,kBACX,kBAAC,IAAD,CAAUR,MAAOA,GAChB,kBAAC,IAAD,KACC,yBAAKd,UAAU,cACd,kBAAC,EAAD,MACA,kBAAC,EAAD,UEHgBuB,QACW,cAA7BJ,OAAOK,SAASC,UAEe,UAA7BN,OAAOK,SAASC,UAEhBN,OAAOK,SAASC,SAASC,MACvB,2DCZNC,IAASd,OACR,kBAAC,IAAMe,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA1C,GACLR,QAAQQ,MAAMA,EAAMD,c","file":"static/js/main.1db1d76d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brand-logo.72f13d44.svg\";","import { SET_CURRENT_USER } from '../actionTypes';\r\n\r\nconst DEFAULT_STATE = {\r\n\tisAuthenticated: false, // will be true, when user is logged in\r\n\tuser: {} // all the user's information when they're logged in\r\n};\r\n\r\nexport default (state = DEFAULT_STATE, action) => {\r\n\tconsole.log(action);\r\n\tswitch (action.type) {\r\n\t\tcase SET_CURRENT_USER:\r\n\t\t\treturn {\r\n\t\t\t\t// if user object(line 5) doesn't have any keys;\r\n\t\t\t\t// isAuthenticated: false, when user object(line 5) keys = 0\r\n\t\t\t\t// isAuthenticated: true, when user object(line 5) keys > 0\r\n\t\t\t\tisAuthenticated: !!Object.keys(action.user).length,\r\n\t\t\t\t// !! will turn an empty object into false or if there are keys true\r\n\t\t\t\t// could also be written as\r\n\t\t\t\t// isAuthenticated: Object.keys(action.user).length > 0,\r\n\r\n\t\t\t\tuser: action.user\r\n\t\t\t};\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import { combineReducers } from 'redux';\r\n\r\nimport currentUser from './currentUser';\r\nimport errors from './errors';\r\n\r\nconst rootReducer = combineReducers({\r\n\tcurrentUser,\r\n\terrors\r\n});\r\n\r\nexport default rootReducer;\r\n","export const ADD_ERROR = 'ADD_ERROR'; // errors when things goes wrong i.e., invalid username, invalid password etc.\r\nexport const REMOVE_ERROR = 'REMOVE_ERROR';\r\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER'; // user who's logged in currently\r\n","import { ADD_ERROR, REMOVE_ERROR } from '../actionTypes';\r\n\r\nexport default (state = { message: null }, action) => {\r\n\tswitch (action.type) {\r\n\t\tcase ADD_ERROR:\r\n\t\t\treturn { ...state, message: action.error };\r\n\t\tcase REMOVE_ERROR:\r\n\t\t\treturn { ...state, message: null };\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t}\r\n};\r\n","import React, { Component } from 'react';\r\nimport { NavLink, Link } from 'react-router-dom'; // for client side routing\r\nimport { connect } from 'react-redux'; // to connect to store\r\nimport brandLogo from '../images/brand-logo.svg';\r\n\r\nconst active = {\r\n\tbackgroundColor: '#007bff',\r\n\tboxShadow: '0 10px 6px -6px gray'\r\n};\r\n\r\nclass Navbar extends Component {\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<nav className=\"navbar navbar-light bg-light justify-content-between fixed-top\">\r\n\t\t\t\t<div className=\"navbar-brand\">\r\n\t\t\t\t\t<Link to=\"/\" className=\"navbar-brand\">\r\n\t\t\t\t\t\t<img src={brandLogo} alt=\"Twitcher\" />\r\n\t\t\t\t\t</Link>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<ul className=\"nav links float-right\">\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/signup\" activeStyle={active}>\r\n\t\t\t\t\t\t\t\tSign Up\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t\t<li>\r\n\t\t\t\t\t\t\t<NavLink to=\"/signin\" activeStyle={active}>\r\n\t\t\t\t\t\t\t\tLog In\r\n\t\t\t\t\t\t\t</NavLink>\r\n\t\t\t\t\t\t</li>\r\n\t\t\t\t\t</ul>\r\n\t\t\t\t</div>\r\n\t\t\t</nav>\r\n\t\t);\r\n\t}\r\n}\r\n\r\n// But if the user is logged in the we don't need to\r\n// show signup and log in\r\n//\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tcurrentUser: state.currentUser\r\n\t};\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Navbar);\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nconst Homepage = () => (\r\n\t<div className=\"home-hero\">\r\n\t\t<div className=\"welcomeMsg\">\r\n\t\t\t<span>Welcome </span>\r\n\t\t\t<span className=\"twit\">T</span>\r\n\t\t\t<span className=\"oo\">o</span>\r\n\t\t</div>\r\n\t\t<span className=\"twit\">Twitcher</span>\r\n\t\t<Link to=\"/signup\" className=\"signupBtn btn btn-primary\">\r\n\t\t\tSign Up Here\r\n\t\t</Link>\r\n\t</div>\r\n);\r\n\r\nexport default Homepage;\r\n","import React from 'react';\r\nimport { Switch, Route, withRouter, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'; // to connect to redux store\r\nimport Homepage from '../components/Homepage';\r\n\r\nconst Main = (props) => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<Switch>\r\n\t\t\t\t<Route exact path=\"/\" render={(props) => <Homepage {...props} />} />\r\n\t\t\t</Switch>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nfunction mapStateToProps(state) {\r\n\treturn {\r\n\t\tcurrentUser: state.currentUser\r\n\t};\r\n}\r\n\r\nexport default withRouter(connect(mapStateToProps, null)(Main));\r\n// withRouter will allow to get the props from the router\r\n","import React, { Component } from 'react';\nimport { Provider } from 'react-redux';\nimport { configureStore } from '../store';\nimport { BrowserRouter as Router } from 'react-router-dom'; // BrowserRouter is client side router\n\nimport Navbar from './Navbar';\nimport Main from './Main';\n\nconst store = configureStore();\n\nconst App = () => (\n\t<Provider store={store}>\n\t\t<Router>\n\t\t\t<div className=\"onboarding\">\n\t\t\t\t<Navbar />\n\t\t\t\t<Main />\n\t\t\t</div>\n\t\t</Router>\n\t</Provider>\n);\nexport default App;\n","import rootReducer from './reducers'; // ./reducers/index.js\r\nimport { createStore, applyMiddleware, compose } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n// createStore -\r\n// applyMiddleware - useful for any kind of middleware; specifically thunk middleware\r\n// compose - will allow to combine functions together\r\n//           useful for second parameter of createStore\r\n// thunk - allows to delay the evaluation of some expression,\r\n//         is essential for working with async code in Redux\r\n\r\nexport function configureStore() {\r\n\tconst store = createStore(\r\n\t\trootReducer,\r\n\t\tcompose(applyMiddleware(thunk), window.devToolsExtension ? window.devToolsExtension() : (f) => f)\r\n\t);\r\n\treturn store;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}